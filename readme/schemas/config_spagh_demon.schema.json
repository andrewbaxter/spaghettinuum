{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "cache_dir",
    "persistent_dir"
  ],
  "properties": {
    "$schema": {
      "description": "Allow setting a JSON Schema URL or path, for example to provide VS Code autocomplete.",
      "default": null,
      "type": [
        "string",
        "null"
      ]
    },
    "api": {
      "description": "An HTTPS server for all client interaction except DNS: resolving, publishing, and administration. It is disabled if not present or null, but to enable it with defaults you can provide an empty config.",
      "default": {
        "bind_addrs": []
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiConfig"
        }
      ]
    },
    "cache_dir": {
      "description": "Where cache files will be placed.",
      "type": "string"
    },
    "enable_admin": {
      "description": "Function: enable the admin rest endpoints.\n\nThis is required if `enable_external_publish` is on.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/FunctionAdmin"
        },
        {
          "type": "null"
        }
      ]
    },
    "enable_external_publish": {
      "description": "Function: enable external publishers to publish records via the rest api.\n\nThe identities to publish must be registered via the admin api beforehand.",
      "default": false,
      "type": "boolean"
    },
    "enable_resolver_dns": {
      "description": "Function: enable resolver queries via dns (via `IDENTITY.s` names).",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/FunctionResolverDns"
        },
        {
          "type": "null"
        }
      ]
    },
    "enable_resolver_rest": {
      "description": "Function: enable resolver queries via the rest api.",
      "default": false,
      "type": "boolean"
    },
    "enable_self_publish_ip": {
      "description": "Function: publish the detected global IP address under the configured self identity.\n\nThis is automatically enabled if `enable_serve_content` is on.",
      "default": false,
      "type": "boolean"
    },
    "enable_self_publish_ssh_key": {
      "description": "Function: publish the current host's ssh host public key.\n\nThis allows the spagh ssh client to resolve the host key via the host identity.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/FunctionPublishSelfSshKeys"
        },
        {
          "type": "null"
        }
      ]
    },
    "enable_self_publish_tls": {
      "description": "Function: generate and publish tls certificates, automatically refreshing before they expire.",
      "default": false,
      "type": "boolean"
    },
    "enable_serve_content": {
      "description": "Function: serve http content (static files or reverse proxy) using a spaghettinuum TLS certificate.\n\nThis is a mapping of interface IPs and ports to bind, to subpaths, to content sources.",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/ContentSource"
        }
      }
    },
    "enable_write_tls": {
      "description": "Function: generate and write tls certificates to a directory\n\nA service like nginx can be configured to use the certs in the directory for publishing content if this demon's publishing functionality isn't used directly.\n\nThe certs are written with a delay of the published tls record ttl (plus a bit) if `enable_self_publish_tls` is on so that clients have a chance to refresh their expected certs before opening a new connection.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/FunctionWriteTls"
        },
        {
          "type": "null"
        }
      ]
    },
    "global_addrs": {
      "description": "How to determine the public ip for publisher announcements and self-publishing. Publisher announcements always use the first address.\n\nIf empty, defaults to using the first gobal IPv6 address found on any interface.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/GlobalAddrConfig"
      }
    },
    "identity": {
      "description": "An identity secret this server will use for generating a TLS cert for the api, and for self-publication if the publisher is enabled.\n\nIf not specified, an identity will be generated at `host.ident` in the data directory.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/IdentitySecretArg"
        },
        {
          "type": "null"
        }
      ]
    },
    "node": {
      "description": "Override default configuration for the node (DHT participant).",
      "default": {
        "bind_addr": null,
        "bootstrap": null
      },
      "allOf": [
        {
          "$ref": "#/definitions/NodeConfig"
        }
      ]
    },
    "persistent_dir": {
      "description": "Where persistent files will be placed, such as published records. You may want to back this up periodically.",
      "type": "string"
    },
    "publisher": {
      "description": "Override default configuration for the publisher.",
      "default": {
        "advertise_port": null,
        "bind_addr": null
      },
      "allOf": [
        {
          "$ref": "#/definitions/PublisherConfig"
        }
      ]
    },
    "resolver": {
      "description": "The resolver (as named) resolves records for clients. It is exposed on the API server along with other APIs.",
      "default": {
        "max_cache": null
      },
      "allOf": [
        {
          "$ref": "#/definitions/ResolverConfig"
        }
      ]
    },
    "tls": {
      "default": {
        "no_certifier": false
      },
      "allOf": [
        {
          "$ref": "#/definitions/TlsConfig"
        }
      ]
    },
    "upstream_dns": {
      "description": "Upstream resolvers. These are used for any dns resolution needed internally (namely, contacting the certifier for self-tls), as well  as resolving non-`.s` names in the dns bridge. Each address port defaults to port 53 if no ADN, otherwise 853. If not specified, uses system resolvers.",
      "default": null,
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/AdnSocketAddr"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AdminToken": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "file"
          ],
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inline"
          ],
          "properties": {
            "inline": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AdnSocketAddr": {
      "description": "Either just an IP address (and port) as it would appear as in a URL host part (IPv6 surrounded by `[]`), followed by `#` then the ADN (authentication domain name - that will appear on the server's TLS certificate). Default ports may change based on the context and presence of the ADN.",
      "type": "string"
    },
    "ApiConfig": {
      "type": "object",
      "properties": {
        "bind_addrs": {
          "description": "Addresses for the server to listen on for client interaction.\n\nIf empty or not specified, defaults to `[::]:12434` and `0:12434`.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        }
      },
      "additionalProperties": false
    },
    "BootstrapConfig": {
      "type": "object",
      "required": [
        "addr",
        "ident"
      ],
      "properties": {
        "addr": {
          "description": "Peer address.",
          "allOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            }
          ]
        },
        "ident": {
          "description": "Node ID at that address.",
          "allOf": [
            {
              "$ref": "#/definitions/NodeIdentity"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ContentSource": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "static_files"
          ],
          "properties": {
            "static_files": {
              "type": "object",
              "required": [
                "content_dir"
              ],
              "properties": {
                "content_dir": {
                  "description": "Where files to serve are.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "reverse_proxy"
          ],
          "properties": {
            "reverse_proxy": {
              "type": "object",
              "required": [
                "upstream_url"
              ],
              "properties": {
                "upstream_url": {
                  "description": "Base url of upstream HTTP server. The request path is appended.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FunctionAdmin": {
      "type": "object",
      "required": [
        "admin_token"
      ],
      "properties": {
        "admin_token": {
          "description": "HTTP authorization `Bearer` token for accessing publisher admin endpoints.\n\nIf not specified, remote admin operations will be disabled (only self-publish on this node will work since there will be no way to register publishing identities).",
          "allOf": [
            {
              "$ref": "#/definitions/AdminToken"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FunctionPublishSelfSshKeys": {
      "type": "object",
      "properties": {
        "ssh_host_keys": {
          "description": "A list of paths to SSH host keys to self-publish for this host.\n\nIf empty or not specified default SSH host key locations will be used.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "FunctionResolverDns": {
      "type": "object",
      "properties": {
        "synthetic_self_record": {
          "description": "Create a synthetic A/AAAA record with this name pointing to this host. This uses the global addresses specified in the root config.",
          "default": null,
          "type": [
            "string",
            "null"
          ]
        },
        "tcp_bind_addrs": {
          "description": "DNS over TLS. Uses a self-provisioned spaghettinuum certificate.\n\nDefaults to `[::]:853` and `0:853` if not specified; set to an empty list to disable.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        },
        "udp_bind_addrs": {
          "description": "Normal UDP DNS (Do53).\n\nDefaults to `[::]:53` and `0:53` if not specified; set to an empty list to disable.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        }
      },
      "additionalProperties": false
    },
    "FunctionWriteTls": {
      "type": "object",
      "required": [
        "write_certs_dir"
      ],
      "properties": {
        "write_certs_dir": {
          "description": "The location to write the certificates to whenever they're refreshed. The certificates will be named `pub.pem` and `priv.pem`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "GlobalAddrConfig": {
      "oneOf": [
        {
          "description": "Use this if you know the IP address beforehand (ex: in terraform, if you allocate a floating ip before provisioning this host) and it's not the address of any local interface.",
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "type": "string",
              "format": "ip"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "If your server is directly on the internet (with an externally reachable IP configured on an interface) this will cause that IP to be used. Specify an interface name (ex: `eth0`) or leave blank to scan all interfaces for a public IP.  All ipv6 addresses are considered public.",
          "type": "object",
          "required": [
            "from_interface"
          ],
          "properties": {
            "from_interface": {
              "type": "object",
              "properties": {
                "ip_version": {
                  "description": "Restrict to ip addresses of this version; unrestricted if empty.",
                  "default": null,
                  "anyOf": [
                    {
                      "$ref": "#/definitions/IpVer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "name": {
                  "description": "Restrict to an interface with this name (like `eth0`); unrestricted if empty.",
                  "default": null,
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up a socket address via a remote service (ex: whatismyip). The service must reply with the ip address as plain text.",
          "type": "object",
          "required": [
            "lookup"
          ],
          "properties": {
            "lookup": {
              "$ref": "#/definitions/GlobalAddrLookupConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GlobalAddrLookupConfig": {
      "type": "object",
      "required": [
        "lookup"
      ],
      "properties": {
        "contact_ip_ver": {
          "description": "Which ip protocol to use to contact lookup server (hence: which ip ver the lookup server will see and return).  If empty, use any ip version.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/IpVer"
            },
            {
              "type": "null"
            }
          ]
        },
        "lookup": {
          "description": "Host to look up address on.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "IdentitySecretArg": {
      "description": "An identity with its associated secret.",
      "oneOf": [
        {
          "description": "A file containing a generated key",
          "type": "object",
          "required": [
            "local"
          ],
          "properties": {
            "local": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IpVer": {
      "type": "string",
      "enum": [
        "v4",
        "v6"
      ]
    },
    "NodeConfig": {
      "type": "object",
      "properties": {
        "bind_addr": {
          "description": "The address the node will listen on (UDP).\n\nDefaults to `[::]:48390` - any open port on any IPv6 interface.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "bootstrap": {
          "description": "A list of peers to use to bootstrap the connection.\n\nDefaults to the current `antipasta` node at time of build.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/BootstrapConfig"
          }
        }
      },
      "additionalProperties": false
    },
    "NodeIdentity": {
      "description": "A node identity (zbase32 string)",
      "type": "string"
    },
    "PublisherConfig": {
      "type": "object",
      "properties": {
        "advertise_port": {
          "description": "Port the publisher is externally reachable on, for advertisements (if different from bind port).",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "bind_addr": {
          "description": "Port to bind for serving published data to other nodes\n\nDefaults to `[::]:48391` - any open port on any IPv6 interface.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ResolverConfig": {
      "type": "object",
      "properties": {
        "max_cache": {
          "description": "Maximum number of entries in resolver cache.",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "StrSocketAddr": {
      "description": "An ip address or domain (ex: \"localhost\") which resolves to an address",
      "type": "string"
    },
    "TlsConfig": {
      "type": "object",
      "properties": {
        "no_certifier": {
          "description": "Disable certifier signature of certs.\n\nThe certs will still be published in spaghettinuum and therefore verifiable via spaghettinuum lookup.\n\nCertifier signature is important for general http clients that don't support spaghettinuum natively as well as systems that don't have spaghettinuum access yet (like DNS clients). If you're just using service discovery or non-http protocols, or you're running on a host with no persistent storage to store certificates disabling certifier usage may avoid rate limit issues.",
          "default": false,
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}